#!/system/bin/sh
# handle_galaxyparts
# by psyke83

command=$(getprop persist.sys.galaxyparts)
setprop persist.sys.galaxyparts ""

if [ "$1" != "" ]; then
    # command from shell (debug)
    command=$1
fi

remount() {
mount -o remount,$1 /system
}

checkswap() {
isswapenabled=$(getprop persist.sys.swap)
ramzswapstatus=$(cat /proc/swaps | grep ramz)
zramstatus=$(cat /proc/swaps | grep zram)
swapstatus=$(cat /proc/swaps | grep mmcblk)

if [ "$ramzswapstatus" != "" ] || [ "$zramstatus" != "" ]; then
    iscompcacheon=1
else
    iscompcacheon=0
fi

if [ "$swapstatus" != "" ]; then
    isswapon=1
else
    isswapon=0
fi
}

fakedt() {
model=$(getprop ro.product.model)
if [ "$model" != "GT-I5500" ]; then
    echo "Wrong model! Aborting fakedt."
    return
fi

dtstatus=$(getprop persist.sys.fakedt)
stpermissions="android.hardware.touchscreen.xml"
mtpermissions="android.hardware.touchscreen.multitouch.distinct.xml"

echo "Fake dual-touch status:" $dtstatus
echo $dtstatus > /sys/devices/virtual/touch/synaptics/fakedt

if [ "$dtstatus" = "1" ] && [ -f /system/etc/permissions/$stpermissions ]; then
    echo "Warning: fake dual-touch is enabled, but ST permissions file is present!"
    echo "Fixed. Permissions will take effect after reboot."
    remount rw
    rm /system/etc/permissions/$stpermissions
    cp /system/galaxyparts/etc/permissions/$mtpermissions /system/etc/permissions/
    chmod 644 /system/etc/permissions/$mtpermissions
    remount ro
fi

if [ "$dtstatus" != "1" ] && [ -f /system/etc/permissions/$mtpermissions ]; then
    echo "Warning: fake dual-touch is disabled, but MT permissions file is present!"
    echo "Fixed. Permissions will take effect after reboot."
    remount rw
    rm /system/etc/permissions/$mtpermissions
    cp /system/galaxyparts/etc/permissions/$stpermissions /system/etc/permissions/
    chmod 644 /system/etc/permissions/$stpermissions
    remount ro
fi
}

readahead() {
bootstatus=$(getprop sys.boot_completed)
sdreadahead=$(getprop persist.sys.read_ahead_kb)
speeds=(128 256 512 1024 2048 4096)
newspeed=${speeds[$sdreadahead]}

# If Android is not fully booted, don't set the default
# read-ahead size (or it could interfere with user scripts)
if ([ "$bootstatus" != "1" ] || [ $command = "bootcheck" ]) && [ "$newspeed" = "128" ]; then
    echo "Warning: will not set default read-ahead buffer during boot"
else
    # Set SD read_ahead_kb
    echo "Setting new SD card read-ahead buffer: "$newspeed"KB"
    echo $newspeed > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi
}

lowmemorykiller () {
bootstatus=$(getprop sys.boot_completed)
lowmemorykillerenabled=$(getprop persist.sys.dynlmk)
if [ "$lowmemorykillerenabled" = "" ]; then
	lowmemorykillerenabled=0
fi
lowmemorykilleradj=$(getprop persist.sys.dynlmk-adj)
lowmemorykillerminfree=$(getprop persist.sys.dynlmk-minfree)
currentlowmemorykilleradj=$(cat /sys/module/lowmemorykiller/parameters/adj)
currentlowmemorykillerminfree=$(cat /sys/module/lowmemorykiller/parameters/minfree)
oldlowmemorykilleradj="0,1,2,4,9,15"
oldlowmemorykillerminfree="2048,3072,4096,6144,7168,8192"

checkswap
if [ "$lowmemorykillerenabled" != "0" ] ; then
    echo -n "Dynamic LMK enabled "
    if [ "$isswapon" = "1" ] || [ "$iscompcacheon" = "1" ]; then
        echo "and swap is active. Setting dynamic LMK values."
        updatelmk $lowmemorykilleradj $lowmemorykillerminfree
    else
        echo "but swap is not active. Setting default values."
        updatelmk $oldlowmemorykilleradj $oldlowmemorykillerminfree
    fi
fi

# If the "optimized" values are set but lowmemorykiller is disabled, change them back to default.
if [ "$lowmemorykillerenabled" = "0" ] || [ "$lowmemorykillerenabled" = "" ]; then
    echo -n "Dynamic LMK disabled. Current LMK values "
    if [ "$currentlowmemorykilleradj" = "$lowmemorykilleradj" ] && [ "$currentlowmemorykillerminfree" = "$lowmemorykillerminfree" ]; then
        echo "will be reset to default."
        updatelmk $oldlowmemorykilleradj $oldlowmemorykillerminfree
    else
        echo "do not need to be changed."
    fi
fi
}

updatelmk() {
currentlowmemorykilleradj=$(cat /sys/module/lowmemorykiller/parameters/adj)
currentlowmemorykillerminfree=$(cat /sys/module/lowmemorykiller/parameters/minfree)
echo "* Current adj    : $currentlowmemorykilleradj"
echo "* New adj        : $1"
echo $1 > /sys/module/lowmemorykiller/parameters/adj
echo "* Current minfree: $currentlowmemorykillerminfree"
echo "* New minfree    : $2"
echo $2 > /sys/module/lowmemorykiller/parameters/minfree
}

swap() {
checkswap
# enable
if [ "$isswapenabled" = "1" ] && [ "$isswapon" = "0" ]; then
    echo "Enabling swap..."
    swapon /dev/block/mmcblk0p3
    lowmemorykiller
fi

# disable
if [ "$isswapenabled" != "1" ] && [ "$isswapon" = "1" ]; then
    echo "Disabling swap..."
    swapoff /dev/block/mmcblk0p3
    lowmemorykiller
fi
}

bootcheck() {
# ensure customizations are applied after Android boot completes
fakedt
swap
readahead
lowmemorykiller
}

# run command
$command

